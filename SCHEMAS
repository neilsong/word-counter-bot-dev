DB Schema

db = users-db
collection = users
doc: {
  __id: [user-id]
  [word]: [count]
}

<-------------------->

db = servers-db
collection = servers

(Count) doc: {
  __id: [server-id]
  [word]: [count]
}
Global doc: {
  __id: 0
  [word]: [count]
}

Prefixes doc: {
  __id: 'prefixes'
  [server-id]: [prefixes-list]
}
Blacklist doc: {
  __id: 'blacklist'
  [server-id]: [channel-blacklist-list]
}
Filter doc: {
  __id: 'filter'
  [server-id]: [word-filter-list]
}

<---------------------------------------------------------------------------------------------------------->

Runtinme Dict Schemas

bot.userWords
{ 
    [user-id]: 
        {
            '__id': [user-id]
            [word]: [count]
        }
}

bot.serverWords
{ 
    [server-id]: 
        {
            '__id': [server-id]
            [word]: [count]
        },
    0:
        {
            '__id': 0
            [word]: [count]
        }
}

__id : 0 represents global count

<----------------------------------------->

bot.prefixes
{
    '__id': 'prefixes'
    [server-id]: 
        {
            [prefixes-list]
        },
}

bot.blacklist
{
    '__id': 'blacklist'
    [server-id]: 
        {
            [channel-blacklist-list]
        },
}


bot.filter
{
    '__id': 'filter'
    [server-id]: 
        {
            [word-filter-list]
        },
}

<----------------------------------------->

Asyncio Worker Queue (defined in db.py - no switch cases)

states: {
  0: prefixes
  1: blacklist
  2: filter
  3: userWords
  4: serverWords
}

task:  
(
  state,
  {
    'id': id,
    'word': word,
    'value': value
  }
)

<---------------------------------------------------------------------------------------------------------->

File (.py) Schema

commands cogs: {
  commands.py - main commands (!count, !top, etc.)
  info.py - bot metadata (!stats, !help, etc.)
  management.py - server configuration (!blacklist, !filter, etc.)
  admin.py - only bot admin commands (!popuser, !popword, etc.)
  error_handler.py - custom error_handler cog
}

main.py - main process that controls bot mainframe
db.py - database interface (concurrent workers on task queue)
config.py - configuration settings for bot instance (database connection string, admins, etc.)
decorator.py - command decorators
utilities.py - custom methods called by commands regardless of context